// Generated by CodiumAI
// Para Book-Form ------------------------------------------------------------------------------------------------------------------------
describe('BookFormComponent', () => {

    // Tests that submitting a valid new book form calls the addBook method of BookService with the correct parameters and redirects to the user dashboard page
    it('should call addBook method of BookService with correct parameters and redirect to user dashboard page when submitting a valid new book form', () => {
        // Arrange
        const bookService = TestBed.inject(BookService);
        const authService = TestBed.inject(AuthService);
        const snackbarService = TestBed.inject(SnackbarService);
        const router = TestBed.inject(Router);
        const bookFormComponent = new BookFormComponent(
          fb,
          route,
          router,
          bookService,
          authService,
          snackbarService
        );
        spyOn(bookService, 'addBook').and.returnValue(of({}));
        spyOn(router, 'navigate');
        // Act
        bookFormComponent.bookForm.setValue({
          title: 'Test Book',
          author: 'Test Author',
          genre: 'Novela',
          editorial: 'Test Editorial',
          year: 2021,
          synopsis: 'Test Synopsis',
          pages: 100,
          language: 'Español',
          availability: true,
          keywords: 'test, book',
          url: 'https://test.com',
          userId: 1
        });
        bookFormComponent.isNewBook = true;
        bookFormComponent.onSubmit();
        // Assert
        expect(bookService.addBook).toHaveBeenCalledWith(1, {
          title: 'Test Book',
          author: 'Test Author',
          genre: 'Novela',
          editorial: 'Test Editorial',
          year: 2021,
          synopsis: 'Test Synopsis',
          pages: 100,
          language: 'Español',
          availability: true,
          keywords: 'test, book',
          url: 'https://test.com',
          userId: 1
        });
        expect(router.navigate).toHaveBeenCalledWith(['/user-dashboard']);
      });

    // Tests that submitting a valid edit book form calls the updateBook method of BookService with the correct parameters and redirects to the user dashboard page
    it('should call updateBook method of BookService with correct parameters and redirect to user dashboard page when submitting a valid edit book form', () => {
        // Arrange
        const bookService = TestBed.inject(BookService);
        const authService = TestBed.inject(AuthService);
        const snackbarService = TestBed.inject(SnackbarService);
        const router = TestBed.inject(Router);
        const bookFormComponent = new BookFormComponent(
          fb,
          route,
          router,
          bookService,
          authService,
          snackbarService
        );
        spyOn(bookService, 'updateBook').and.returnValue(of({}));
        spyOn(router, 'navigate');
        // Act
        bookFormComponent.bookForm.setValue({
          title: 'Test Book',
          author: 'Test Author',
          genre: 'Novela',
          editorial: 'Test Editorial',
          year: 2021,
          synopsis: 'Test Synopsis',
          pages: 100,
          language: 'Español',
          availability: true,
          keywords: 'test, book',
          url: 'https://test.com',
          userId: 1
        });
        bookFormComponent.isNewBook = false;
        bookFormComponent.bookId = 1;
        bookFormComponent.onSubmit();
        // Assert
        expect(bookService.updateBook).toHaveBeenCalledWith(1, 1, {
          title: 'Test Book',
          author: 'Test Author',
          genre: 'Novela',
          editorial: 'Test Editorial',
          year: 2021,
          synopsis: 'Test Synopsis',
          pages: 100,
          language: 'Español',
          availability: true,
          keywords: 'test, book',
          url: 'https://test.com',
          userId: 1
        });
        expect(router.navigate).toHaveBeenCalledWith(['/user-dashboard']);
      });

    // Tests that submitting a form with invalid data does not call any method of BookService and does not redirect
    it('should not call any method of BookService and not redirect when submitting a form with invalid data', () => {
        // Arrange
        const bookService = TestBed.inject(BookService);
        const authService = TestBed.inject(AuthService);
        const snackbarService = TestBed.inject(SnackbarService);
        const router = TestBed.inject(Router);
        const bookFormComponent = new BookFormComponent(
          fb,
          route,
          router,
          bookService,
          authService,
          snackbarService
        );
        spyOn(bookService, 'addBook');
        spyOn(bookService, 'updateBook');
        spyOn(router, 'navigate');
        // Act
        bookFormComponent.bookForm.setValue({
          title: '',
          author: '',
          genre: '',
          editorial: '',
          year: '',
          synopsis: '',
          pages: '',
          language: '',
          availability: '',
          keywords: '',
          url: '',
          userId: 1
        });
        bookFormComponent.onSubmit();
        // Assert
        expect(bookService.addBook).not.toHaveBeenCalled();
        expect(bookService.updateBook).not.toHaveBeenCalled();
        expect(router.navigate).not.toHaveBeenCalled();
      });
});

// Para Login ------------------------------------------------------------------------------------------------------------------------
// Generated by CodiumAI

describe('LoginComponent', () => {

    // Tests that successful authentication redirects to dashboard
    it('should redirect to dashboard when authentication is successful', () => {
        // Arrange
        const routerSpy = jest.spyOn(router, 'navigateByUrl');
        const returnUrl = '/user-dashboard';
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        jest.spyOn(authService, 'login').mockResolvedValue(true);
        jest.spyOn(route.snapshot.queryParams, 'returnUrl', 'get').mockReturnValue(returnUrl);

        // Act
        loginComponent.onLogin();

        // Assert
        expect(routerSpy).toHaveBeenCalledWith(returnUrl);
    });

    // Tests that successful authentication shows success snackbar message
    it('should show success snackbar message when authentication is successful', () => {
        // Arrange
        const snackbarSpy = jest.spyOn(snackbarService, 'showSnackbar');
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        jest.spyOn(authService, 'login').mockResolvedValue(true);

        // Act
        loginComponent.onLogin();

        // Assert
        expect(snackbarSpy).toHaveBeenCalledWith('Inicio de sesión exitoso');
    });

    // Tests that unsuccessful authentication shows error snackbar message
    it('should show error snackbar message when authentication is unsuccessful', () => {
        // Arrange
        const snackbarSpy = jest.spyOn(snackbarService, 'showSnackbar');
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        jest.spyOn(authService, 'login').mockResolvedValue(false);

        // Act
        loginComponent.onLogin();

        // Assert
        expect(snackbarSpy).toHaveBeenCalledWith('Autenticación fallida');
    });

    // Tests that error during authentication shows error snackbar message
    it('should show error snackbar message when there is an error during authentication', () => {
        // Arrange
        const snackbarSpy = jest.spyOn(snackbarService, 'showSnackbar');
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        jest.spyOn(authService, 'login').mockRejectedValue(new Error('Error en la autenticación'));

        // Act
        loginComponent.onLogin();

        // Assert
        expect(snackbarSpy).toHaveBeenCalledWith('Error en la autenticación', new Error('Error en la autenticación'));
    });

    // Tests that empty username or password shows error snackbar message
    it('should show error snackbar message when username or password is empty', () => {
        // Arrange
        const snackbarSpy = jest.spyOn(snackbarService, 'showSnackbar');
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        loginComponent.username = '';
        loginComponent.password = '';

        // Act
        loginComponent.onLogin();

        // Assert
        expect(snackbarSpy).toHaveBeenCalledWith('Autenticación fallida');
    });

    // Tests that snackbar message duration can be customized
    it('should show snackbar message with customized duration', () => {
        // Arrange
        const snackbarSpy = jest.spyOn(snackbarService, 'showSnackbar');
        const loginComponent = new LoginComponent(authService, router, route, snackbarService);
        const duration = 5000;
        jest.spyOn(authService, 'login').mockResolvedValue(true);

        // Act
        loginComponent.onLogin();

        // Assert
        expect(snackbarSpy).toHaveBeenCalledWith('Inicio de sesión exitoso', duration);
    });
});


// Para Dashboard ------------------------------------------------------------------------------------------------------------------------
// Generated by CodiumAI

describe('UserDashboardComponent', () => {

    // Tests that books are loaded successfully
    it('should load books successfully', () => {
      const component = new UserDashboardComponent(null, null, null, null, null);
      component.loadBooks();
      expect(component.books.length).toBeGreaterThan(0);
    });

    // Tests that book information is displayed when a book is clicked
    it('should display book information when a book is clicked', () => {
      const component = new UserDashboardComponent(null, null, {getBookByUser: () => of({})}, null, {open: () => {}});
      const spy = spyOn(component.dialog, 'open').and.callThrough();
      component.viewBookInfo({id: 1});
      expect(spy).toHaveBeenCalled();
    });

    // Tests that a book can be edited
    it('should navigate to book-form when a book is edited', () => {
      const component = new UserDashboardComponent(null, null, null, null, {navigate: () => {}});
      const spy = spyOn(component.router, 'navigate').and.callThrough();
      component.editBook({id: 1});
      expect(spy).toHaveBeenCalledWith(['/book-form', 1]);
    });

    // Tests that a book can be deleted
    it('should delete a book when it is deleted', () => {
      const component = new UserDashboardComponent(null, null, {deleteBook: () => of({})}, null, null);
      const spy = spyOn(component, 'loadBooks').and.callThrough();
      component.deleteBook({id: 1});
      expect(spy).toHaveBeenCalled();
    });
});

